package handlers

import (
	"fmt"
	"net/http"

	"my-go-project/models"

	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

// --- Struct ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•" (‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Client) ---
// --- Struct ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•" (‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Client) ---
type ReleaseRequest struct {
    Rewards []struct {
        LottoID    uint    `json:"lotto_id" binding:"required,gt=0"`
        PrizeTier  int     `json:"prize_tier" binding:"required,gt=0"`
        PrizeMoney float64 `json:"prize_money" binding:"required,gte=0"`
    } `json:"rewards" binding:"required,min=1"`
}

// --- Struct ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•" (‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ Client ‡∏î‡∏π‡∏Å‡πà‡∏≠‡∏ô) ---
type RewardPreview struct {
	PrizeTier    int          `json:"prize_tier"`
	PrizeMoney   float64      `json:"prize_money"`
	WinningLotto models.Lotto `json:"winning_lotto"`
}

// GET /rewards/generate-preview
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Admin ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô
func GenerateRewardsPreview(c *gin.Context, db *gorm.DB) {
	var lottos []models.Lotto

	// 1. ‡∏™‡∏∏‡πà‡∏°‡∏™‡∏•‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ç‡∏≤‡∏¢‡∏≠‡∏¢‡∏π‡πà (status = 'sell') ‡∏°‡∏≤ 4 ‡πÉ‡∏ö
	//    ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1, 2, 3, ‡πÅ‡∏•‡∏∞ 5
	if err := db.Model(&models.Lotto{}).
		Where("status = ?", "sell").
		Order("RAND()").
		Limit(4).
		Find(&lottos).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"status": "error", "message": "database error"})
		return
	}

	// 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏•‡∏≤‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if len(lottos) < 4 {
		c.JSON(http.StatusConflict, gin.H{"status": "error", "message": fmt.Sprintf("‡∏°‡∏µ‡∏™‡∏•‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ 4 ‡πÉ‡∏ö ‡πÅ‡∏ï‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏µ‡∏¢‡∏á %d ‡πÉ‡∏ö)", len(lottos))})
		return
	}

	// 3. ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Admin ‡∏î‡∏π
	previews := []RewardPreview{
		{PrizeTier: 1, PrizeMoney: 6000000.00, WinningLotto: lottos[0]},
		{PrizeTier: 2, PrizeMoney: 100000.00, WinningLotto: lottos[1]},
		{PrizeTier: 3, PrizeMoney: 80000.00,  WinningLotto: lottos[2]},
		{PrizeTier: 5, PrizeMoney: 2000.00,   WinningLotto: lottos[3]},
	}

	c.JSON(http.StatusOK, gin.H{
		"status":  "success",
		"message": "‡∏™‡∏∏‡πà‡∏°‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
		"data":    previews,
	})
}

// POST /rewards/release
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•" (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á DB ‡∏à‡∏£‡∏¥‡∏á)
func ReleaseRewards(c *gin.Context, db *gorm.DB) {
	var req ReleaseRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"status": "error", "message": "invalid request body"})
		return
	}

	// ‡πÄ‡∏£‡∏¥‡πà‡∏° Transaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
	tx := db.Begin()

	// 1. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á rewards ‡∏ó‡∏¥‡πâ‡∏á
	//    ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ô‡∏µ‡πâ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏Ç‡∏≠‡∏á‡∏á‡∏ß‡∏î‡πÄ‡∏Å‡πà‡∏≤‡∏õ‡∏∞‡∏õ‡∏ô‡∏Å‡∏±‡∏ö‡∏á‡∏ß‡∏î‡πÉ‡∏´‡∏°‡πà
	if err := tx.Exec("DELETE FROM rewards").Error; err != nil {
		tx.Rollback() // ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
		c.JSON(http.StatusInternalServerError, gin.H{"status": "error", "message": "failed to clear old rewards"})
		return
	}

	// 2. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ä‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞ INSERT
	newRewards := make([]models.Reward, 0, len(req.Rewards))
	for _, r := range req.Rewards {
		newRewards = append(newRewards, models.Reward{
			LottoID:    r.LottoID,
			PrizeMoney: r.PrizeMoney,
			PrizeTier:  r.PrizeTier,
			// Status ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô default '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏á‡∏¥‡∏ô' ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
		})
	}

	// 3. INSERT ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ä‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
	if err := tx.Create(&newRewards).Error; err != nil {
		tx.Rollback() // ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
		c.JSON(http.StatusInternalServerError, gin.H{"status": "error", "message": "failed to insert new rewards"})
		return
	}

	// 4. ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ Commit Transaction
	if err := tx.Commit().Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"status": "error", "message": "failed to commit transaction"})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"status":  "success",
		"message": fmt.Sprintf("‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏°‡∏µ‡∏ú‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î %d ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•", len(newRewards)),
	})
}


type CurrentRewardResponse struct {
	PrizeTier   int     `json:"prize_tier"`
	PrizeMoney  float64 `json:"prize_money"`
	LottoNumber string  `json:"lotto_number"`
}


// üöÄ NEW ENDPOINT üöÄ
// GET /rewards/current
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
func GetCurrentRewards(c *gin.Context, db *gorm.DB) {
	var results []CurrentRewardResponse

	// ‡πÉ‡∏ä‡πâ GORM ‡πÄ‡∏û‡∏∑‡πà‡∏≠ JOIN ‡∏ï‡∏≤‡∏£‡∏≤‡∏á rewards ‡πÅ‡∏•‡∏∞ lotto
	// 1. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å Model Reward
	// 2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
	// 3. Join ‡∏ï‡∏≤‡∏£‡∏≤‡∏á lotto ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç lotto.lotto_id = rewards.lotto_id
	// 4. ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ó‡∏µ‡πà 1 ‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î
	// 5. ‡πÉ‡∏ä‡πâ .Scan() ‡πÄ‡∏û‡∏∑‡πà‡∏≠ map ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á‡πÉ‡∏ô struct ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤ (CurrentRewardResponse)
	err := db.Model(&models.Reward{}).
		Select("rewards.prize_tier, rewards.prize_money, lotto.lotto_number").
		Joins("JOIN lotto ON lotto.lotto_id = rewards.lotto_id").
		Order("rewards.prize_tier ASC").
		Scan(&results).Error

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"status": "error", "message": "failed to fetch current rewards: " + err.Error()})
		return
	}

	// ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
	if len(results) == 0 {
		c.JSON(http.StatusOK, gin.H{
			"status":  "success",
			"message": "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•",
			"data":    []CurrentRewardResponse{}, // ‡∏™‡πà‡∏á array ‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"status":  "success",
		"message": "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
		"data":    results,
	})
}